import { Observable } from "rxjs";
export interface MapWithChanges<K, V> extends Map<K, V> {
    changes: Set<K>;
}
/**
 * Creates a stream that combines the result of the streams from each key of the input stream.
 *
 * @param keys$ Stream of the list of keys to subscribe to.
 * @param getInner$ Function that returns the stream for each key.
 * @returns An stream with a map containing the latest value from the stream of each key.
 */
export declare const combineKeys: <K, T>(keys$: Observable<K[] | Set<K>>, getInner$: (key: K) => Observable<T>) => Observable<MapWithChanges<K, T>>;
