{
  "version": 3,
  "sources": ["../src/index.ts", "../src/SUSPENSE.ts", "../src/StatePromise.ts", "../src/errors.ts", "../src/internal/empty-value.ts", "../src/state/stateFactory.ts", "../src/internal/state-observable.ts", "../src/state/stateSingle.ts", "../src/state/index.ts", "../src/withDefault.ts", "../src/effects/sinkSuspense.ts", "../src/effects/liftSuspense.ts"],
  "sourcesContent": ["export { SUSPENSE } from \"./SUSPENSE\"\nexport { StatePromise } from \"./StatePromise\"\nexport { NoSubscribersError, EmptyObservableError } from \"./errors\"\nexport { state } from \"./state\"\nexport { withDefault } from \"./withDefault\"\nexport { liftSuspense, sinkSuspense } from \"./effects\"\n", "import type { SUSPENSE as iSUSPENSE } from \"./index.d\"\nexport const SUSPENSE: iSUSPENSE = Symbol(\"SUSPENSE\") as any\nexport type SUSPENSE = iSUSPENSE\n", "import type { StatePromise as IStatePromise } from \"./index.d\"\n\nexport class StatePromise<T> extends Promise<T> implements IStatePromise<T> {\n  constructor(cb: (res: (value: T) => void, rej: any) => void) {\n    super(cb)\n  }\n}\n", "import type {\n  NoSubscribersError as INoSubscribersError,\n  EmptyObservableError as IEmptyObservableError,\n} from \"./index.d\"\n\nexport class NoSubscribersError extends Error implements INoSubscribersError {\n  constructor() {\n    super()\n    this.name = \"NoSubscribersError\"\n  }\n}\n\nexport class EmptyObservableError\n  extends Error\n  implements IEmptyObservableError\n{\n  constructor() {\n    super()\n    this.name = \"EmptyObservableError\"\n  }\n}\n", "export const EMPTY_VALUE: any = {}\n", "import { Observable } from \"rxjs\"\nimport StateObservable from \"../internal/state-observable\"\n\nfunction cloneProps<T>(\n  internal: StateObservable<T>,\n  external: StateObservable<T>,\n) {\n  external.getValue = internal.getValue\n  external.getRefCount = internal.getRefCount\n  external.pipeState = internal.pipeState\n  if ((internal as any).getDefaultValue) {\n    ;(external as any).getDefaultValue = (internal as any).getDefaultValue\n  }\n}\n\nexport default function connectFactoryObservable<A extends [], O>(\n  getObservable: (...args: A) => Observable<O>,\n  defaultValue: O | ((...args: A) => O),\n) {\n  const cache = new NestedMap<A, StateObservable<O>>()\n  const getDefaultValue = (\n    typeof defaultValue === \"function\" ? defaultValue : () => defaultValue\n  ) as (...args: A) => O\n\n  const getSharedObservables$ = (input: A): StateObservable<O> => {\n    for (let i = input.length - 1; input[i] === undefined && i > -1; i--) {\n      input.splice(-1)\n    }\n    const keys = [input.length, ...input] as any as A\n    const cachedVal = cache.get(keys)\n\n    if (cachedVal !== undefined) {\n      return cachedVal\n    }\n\n    const sharedObservable$ = new StateObservable(\n      getObservable(...input),\n      getDefaultValue(...input),\n      () => {\n        cache.delete(keys)\n      },\n    )\n\n    const publicShared$ = new Observable<O>((subscriber) => {\n      const inCache = cache.get(keys)\n      let source$: StateObservable<O> = sharedObservable$\n\n      if (!inCache) {\n        cache.set(keys, result)\n      } else if (inCache !== publicShared$) {\n        source$ = inCache\n        cloneProps(source$, publicShared$)\n      }\n\n      return source$.subscribe(subscriber)\n    }) as StateObservable<O>\n    cloneProps(sharedObservable$, publicShared$)\n\n    const result: StateObservable<O> = publicShared$\n\n    cache.set(keys, result)\n    return result\n  }\n\n  return (...input: A) => getSharedObservables$(input)\n}\n\nclass NestedMap<K extends [], V extends Object> {\n  private root: Map<K, any>\n  constructor() {\n    this.root = new Map()\n  }\n\n  get(keys: K[]): V | undefined {\n    let current: any = this.root\n    for (let i = 0; i < keys.length; i++) {\n      current = current.get(keys[i])\n      if (!current) return undefined\n    }\n    return current\n  }\n\n  set(keys: K[], value: V): void {\n    let current: Map<K, any> = this.root\n    let i\n    for (i = 0; i < keys.length - 1; i++) {\n      let nextCurrent = current.get(keys[i])\n      if (!nextCurrent) {\n        nextCurrent = new Map<K, any>()\n        current.set(keys[i], nextCurrent)\n      }\n      current = nextCurrent\n    }\n    current.set(keys[i], value)\n  }\n\n  delete(keys: K[]): void {\n    const maps: Map<K, any>[] = [this.root]\n    let current: Map<K, any> = this.root\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      maps.push((current = current.get(keys[i])))\n    }\n\n    let mapIdx = maps.length - 1\n    maps[mapIdx].delete(keys[mapIdx])\n\n    while (--mapIdx > -1 && maps[mapIdx].get(keys[mapIdx]).size === 0) {\n      maps[mapIdx].delete(keys[mapIdx])\n    }\n  }\n}\n", "import {\n  noop,\n  Observable,\n  OperatorFunction,\n  Subject,\n  Subscriber,\n  Subscription,\n} from \"rxjs\"\nimport { EmptyObservableError, NoSubscribersError } from \"../errors\"\nimport { StatePromise } from \"../StatePromise\"\nimport { SUSPENSE } from \"../SUSPENSE\"\nimport { EMPTY_VALUE } from \"./empty-value\"\n\nexport default class StateObservable<T> extends Observable<T> {\n  private subject: Subject<T> | null = null\n  private subscription: Subscriber<T> | null = null\n  private refCount = 0\n  private currentValue: T = EMPTY_VALUE\n  private promise: {\n    res: (value: Exclude<T, SUSPENSE>) => void\n    rej: (v: any) => void\n    p: StatePromise<Exclude<T, SUSPENSE>>\n  } | null = null\n\n  constructor(\n    source$: Observable<T>,\n    private defaultValue: T,\n    teardown = noop,\n  ) {\n    super((subscriber) => {\n      const subscriberWithoutComplete = new Subscriber({\n        next: subscriber.next.bind(subscriber),\n        error: subscriber.error.bind(subscriber),\n        complete: noop,\n      })\n\n      this.refCount++\n      let innerSub: Subscription\n\n      subscriber.add(() => {\n        this.refCount--\n        innerSub.unsubscribe()\n        if (this.refCount === 0) {\n          this.currentValue = EMPTY_VALUE\n          if (this.subscription) {\n            this.subscription.unsubscribe()\n          }\n          teardown()\n          this.subject?.complete()\n          this.subject = null\n          this.subscription = null\n          if (this.promise) {\n            this.promise.rej(new NoSubscribersError())\n            this.promise = null\n          }\n        }\n      })\n\n      if (!this.subject) {\n        this.subject = new Subject<T>()\n        innerSub = this.subject.subscribe(subscriberWithoutComplete)\n        this.subscription = null\n        this.subscription = new Subscriber<T>({\n          next: (value: T) => {\n            if (this.promise && (value as any) !== SUSPENSE) {\n              this.promise.res(value as any)\n              this.promise = null\n            }\n            this.subject!.next((this.currentValue = value))\n          },\n          error: (err: any) => {\n            this.subscription = null\n            const subject = this.subject\n            this.subject = null\n            this.currentValue = EMPTY_VALUE\n\n            const rej = this.promise?.rej\n            if (rej && err === SUSPENSE) {\n              this.promise!.rej = () => {\n                rej!(err)\n              }\n            }\n            subject!.error(err)\n            if (rej && this.promise) {\n              this.promise.rej = rej\n            }\n          },\n          complete: () => {\n            this.subscription = null\n            if (this.promise) {\n              this.promise.rej(new EmptyObservableError())\n              this.promise = null\n            }\n\n            if (this.currentValue !== EMPTY_VALUE)\n              return this.subject!.complete()\n\n            if (defaultValue === EMPTY_VALUE) {\n              const subject = this.subject\n              this.subject = null\n              return subject!.error(new EmptyObservableError())\n            }\n\n            this.subject!.next((this.currentValue = defaultValue))\n            this.subject!.complete()\n          },\n        })\n        source$.subscribe(this.subscription)\n        if (defaultValue !== EMPTY_VALUE && this.currentValue === EMPTY_VALUE) {\n          this.subject!.next((this.currentValue = defaultValue))\n        }\n      } else {\n        innerSub = this.subject.subscribe(subscriberWithoutComplete)\n        if (this.currentValue !== EMPTY_VALUE) {\n          subscriber.next(this.currentValue)\n        }\n      }\n    })\n\n    if (defaultValue === EMPTY_VALUE) {\n      // Remove the getDefaultValue property from this object, as it's not part of the interface\n      delete this.getDefaultValue\n    }\n  }\n\n  pipeState = (...ops: OperatorFunction<any, any>[]) => {\n    const result = (super.pipe as any)(...ops)\n    return result instanceof StateObservable\n      ? result\n      : new StateObservable(result, EMPTY_VALUE)\n  }\n\n  getRefCount = () => {\n    return this.refCount\n  }\n  getValue = (): Exclude<T, SUSPENSE> | StatePromise<Exclude<T, SUSPENSE>> => {\n    if (this.promise) return this.promise.p\n    if (\n      this.currentValue !== EMPTY_VALUE &&\n      (this.currentValue as any) !== SUSPENSE\n    )\n      return this.currentValue as any\n    if (this.defaultValue !== EMPTY_VALUE) return this.defaultValue as any\n    if (this.refCount === 0) throw new NoSubscribersError()\n\n    const promise = new StatePromise<Exclude<T, SUSPENSE>>((res, rej) => {\n      this.promise = { res, rej, p: null as any }\n    })\n    this.promise!.p = promise\n    return promise\n  }\n  getDefaultValue? = () => {\n    return this.defaultValue\n  }\n}\n", "import { Observable } from \"rxjs\"\nimport StateObservable from \"../internal/state-observable\"\n\nexport default function state<T>(observable: Observable<T>, defaultValue: T) {\n  return new StateObservable<T>(observable, defaultValue)\n}\n", "import type { state as IState } from \"../index.d\"\nimport { EMPTY_VALUE } from \"../internal/empty-value\"\nimport stateFactory from \"./stateFactory\"\nimport stateSingle from \"./stateSingle\"\n\nexport const state: typeof IState = (...args: any[]) =>\n  (typeof args[0] === \"function\" ? (stateFactory as any) : stateSingle)(\n    args[0],\n    args.length > 1 ? args[1] : EMPTY_VALUE,\n  )\n", "import { Observable } from \"rxjs\"\nimport type { withDefault as IWithDefault } from \"./index.d\"\nimport { state } from \"./state\"\n\nexport const withDefault: typeof IWithDefault =\n  <D>(defaultValue: D) =>\n  <T>(source$: Observable<T>) =>\n    state<D | T>(source$, defaultValue)\n", "import { Observable, Subscriber } from \"rxjs\"\nimport { SUSPENSE } from \"../SUSPENSE\"\nimport { sinkSuspense as ISinkSuspense } from \"../index.d\"\n\ntype SubscriberWithInner<T> = Subscriber<T> & { inner: Subscriber<any> }\nexport const sinkSuspense: typeof ISinkSuspense = () => {\n  return <T>(source$: Observable<T>) => {\n    let waiting: SubscriberWithInner<any> | null = null\n\n    return new Observable((observer) => {\n      if (waiting) {\n        waiting.inner = observer\n        const outter = waiting!\n        return () => {\n          if (outter.inner === observer) outter.unsubscribe()\n        }\n      }\n\n      let outter = new Subscriber<T | SUSPENSE>({\n        next(value: T | SUSPENSE) {\n          if (value === SUSPENSE) {\n            waiting = outter\n            outter.inner.error(value)\n            waiting = null\n            if (outter.inner === observer) {\n              outter.unsubscribe()\n            }\n          } else {\n            outter.inner.next(value)\n          }\n        },\n        error(e: unknown) {\n          outter.inner.error(e)\n        },\n        complete() {\n          outter.inner.complete()\n        },\n      }) as SubscriberWithInner<T>\n\n      outter.inner = observer\n      source$.subscribe(outter)\n\n      return () => {\n        if (outter.inner === observer) outter.unsubscribe()\n      }\n    })\n  }\n}\n", "import { Observable, Subscriber } from \"rxjs\"\nimport { SUSPENSE } from \"../SUSPENSE\"\nimport type { liftSuspense as ILiftSuspense } from \"../index.d\"\n\nexport const liftSuspense: typeof ILiftSuspense = () => {\n  return <T>(source$: Observable<T>): Observable<T | SUSPENSE> => {\n    return new Observable((observer) => {\n      let subscriber: Subscriber<any>\n\n      const setSubscriber = () => {\n        subscriber = new Subscriber<T>({\n          next(v: T) {\n            observer.next(v as any)\n          },\n          error(e: unknown) {\n            if (e === SUSPENSE) {\n              observer.next(e)\n              setSubscriber()\n            } else observer.error(e)\n          },\n          complete() {\n            observer.complete()\n          },\n        })\n        source$.subscribe(subscriber)\n      }\n\n      setSubscriber()\n\n      return () => {\n        subscriber.unsubscribe()\n      }\n    })\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
