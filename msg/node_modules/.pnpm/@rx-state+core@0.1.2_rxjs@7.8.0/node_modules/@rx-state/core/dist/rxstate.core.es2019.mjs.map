{
  "version": 3,
  "sources": ["../src/SUSPENSE.ts", "../src/StatePromise.ts", "../src/errors.ts", "../src/internal/empty-value.ts", "../src/state/stateFactory.ts", "../src/internal/state-observable.ts", "../src/state/stateSingle.ts", "../src/state/index.ts", "../src/withDefault.ts", "../src/effects/sinkSuspense.ts", "../src/effects/liftSuspense.ts"],
  "sourcesContent": ["import type { SUSPENSE as iSUSPENSE } from \"./index.d\"\nexport const SUSPENSE: iSUSPENSE = Symbol(\"SUSPENSE\") as any\nexport type SUSPENSE = iSUSPENSE\n", "import type { StatePromise as IStatePromise } from \"./index.d\"\n\nexport class StatePromise<T> extends Promise<T> implements IStatePromise<T> {\n  constructor(cb: (res: (value: T) => void, rej: any) => void) {\n    super(cb)\n  }\n}\n", "import type {\n  NoSubscribersError as INoSubscribersError,\n  EmptyObservableError as IEmptyObservableError,\n} from \"./index.d\"\n\nexport class NoSubscribersError extends Error implements INoSubscribersError {\n  constructor() {\n    super()\n    this.name = \"NoSubscribersError\"\n  }\n}\n\nexport class EmptyObservableError\n  extends Error\n  implements IEmptyObservableError\n{\n  constructor() {\n    super()\n    this.name = \"EmptyObservableError\"\n  }\n}\n", "export const EMPTY_VALUE: any = {}\n", "import { Observable } from \"rxjs\"\nimport StateObservable from \"../internal/state-observable\"\n\nfunction cloneProps<T>(\n  internal: StateObservable<T>,\n  external: StateObservable<T>,\n) {\n  external.getValue = internal.getValue\n  external.getRefCount = internal.getRefCount\n  external.pipeState = internal.pipeState\n  if ((internal as any).getDefaultValue) {\n    ;(external as any).getDefaultValue = (internal as any).getDefaultValue\n  }\n}\n\nexport default function connectFactoryObservable<A extends [], O>(\n  getObservable: (...args: A) => Observable<O>,\n  defaultValue: O | ((...args: A) => O),\n) {\n  const cache = new NestedMap<A, StateObservable<O>>()\n  const getDefaultValue = (\n    typeof defaultValue === \"function\" ? defaultValue : () => defaultValue\n  ) as (...args: A) => O\n\n  const getSharedObservables$ = (input: A): StateObservable<O> => {\n    for (let i = input.length - 1; input[i] === undefined && i > -1; i--) {\n      input.splice(-1)\n    }\n    const keys = [input.length, ...input] as any as A\n    const cachedVal = cache.get(keys)\n\n    if (cachedVal !== undefined) {\n      return cachedVal\n    }\n\n    const sharedObservable$ = new StateObservable(\n      getObservable(...input),\n      getDefaultValue(...input),\n      () => {\n        cache.delete(keys)\n      },\n    )\n\n    const publicShared$ = new Observable<O>((subscriber) => {\n      const inCache = cache.get(keys)\n      let source$: StateObservable<O> = sharedObservable$\n\n      if (!inCache) {\n        cache.set(keys, result)\n      } else if (inCache !== publicShared$) {\n        source$ = inCache\n        cloneProps(source$, publicShared$)\n      }\n\n      return source$.subscribe(subscriber)\n    }) as StateObservable<O>\n    cloneProps(sharedObservable$, publicShared$)\n\n    const result: StateObservable<O> = publicShared$\n\n    cache.set(keys, result)\n    return result\n  }\n\n  return (...input: A) => getSharedObservables$(input)\n}\n\nclass NestedMap<K extends [], V extends Object> {\n  private root: Map<K, any>\n  constructor() {\n    this.root = new Map()\n  }\n\n  get(keys: K[]): V | undefined {\n    let current: any = this.root\n    for (let i = 0; i < keys.length; i++) {\n      current = current.get(keys[i])\n      if (!current) return undefined\n    }\n    return current\n  }\n\n  set(keys: K[], value: V): void {\n    let current: Map<K, any> = this.root\n    let i\n    for (i = 0; i < keys.length - 1; i++) {\n      let nextCurrent = current.get(keys[i])\n      if (!nextCurrent) {\n        nextCurrent = new Map<K, any>()\n        current.set(keys[i], nextCurrent)\n      }\n      current = nextCurrent\n    }\n    current.set(keys[i], value)\n  }\n\n  delete(keys: K[]): void {\n    const maps: Map<K, any>[] = [this.root]\n    let current: Map<K, any> = this.root\n\n    for (let i = 0; i < keys.length - 1; i++) {\n      maps.push((current = current.get(keys[i])))\n    }\n\n    let mapIdx = maps.length - 1\n    maps[mapIdx].delete(keys[mapIdx])\n\n    while (--mapIdx > -1 && maps[mapIdx].get(keys[mapIdx]).size === 0) {\n      maps[mapIdx].delete(keys[mapIdx])\n    }\n  }\n}\n", "import {\n  noop,\n  Observable,\n  OperatorFunction,\n  Subject,\n  Subscriber,\n  Subscription,\n} from \"rxjs\"\nimport { EmptyObservableError, NoSubscribersError } from \"../errors\"\nimport { StatePromise } from \"../StatePromise\"\nimport { SUSPENSE } from \"../SUSPENSE\"\nimport { EMPTY_VALUE } from \"./empty-value\"\n\nexport default class StateObservable<T> extends Observable<T> {\n  private subject: Subject<T> | null = null\n  private subscription: Subscriber<T> | null = null\n  private refCount = 0\n  private currentValue: T = EMPTY_VALUE\n  private promise: {\n    res: (value: Exclude<T, SUSPENSE>) => void\n    rej: (v: any) => void\n    p: StatePromise<Exclude<T, SUSPENSE>>\n  } | null = null\n\n  constructor(\n    source$: Observable<T>,\n    private defaultValue: T,\n    teardown = noop,\n  ) {\n    super((subscriber) => {\n      const subscriberWithoutComplete = new Subscriber({\n        next: subscriber.next.bind(subscriber),\n        error: subscriber.error.bind(subscriber),\n        complete: noop,\n      })\n\n      this.refCount++\n      let innerSub: Subscription\n\n      subscriber.add(() => {\n        this.refCount--\n        innerSub.unsubscribe()\n        if (this.refCount === 0) {\n          this.currentValue = EMPTY_VALUE\n          if (this.subscription) {\n            this.subscription.unsubscribe()\n          }\n          teardown()\n          this.subject?.complete()\n          this.subject = null\n          this.subscription = null\n          if (this.promise) {\n            this.promise.rej(new NoSubscribersError())\n            this.promise = null\n          }\n        }\n      })\n\n      if (!this.subject) {\n        this.subject = new Subject<T>()\n        innerSub = this.subject.subscribe(subscriberWithoutComplete)\n        this.subscription = null\n        this.subscription = new Subscriber<T>({\n          next: (value: T) => {\n            if (this.promise && (value as any) !== SUSPENSE) {\n              this.promise.res(value as any)\n              this.promise = null\n            }\n            this.subject!.next((this.currentValue = value))\n          },\n          error: (err: any) => {\n            this.subscription = null\n            const subject = this.subject\n            this.subject = null\n            this.currentValue = EMPTY_VALUE\n\n            const rej = this.promise?.rej\n            if (rej && err === SUSPENSE) {\n              this.promise!.rej = () => {\n                rej!(err)\n              }\n            }\n            subject!.error(err)\n            if (rej && this.promise) {\n              this.promise.rej = rej\n            }\n          },\n          complete: () => {\n            this.subscription = null\n            if (this.promise) {\n              this.promise.rej(new EmptyObservableError())\n              this.promise = null\n            }\n\n            if (this.currentValue !== EMPTY_VALUE)\n              return this.subject!.complete()\n\n            if (defaultValue === EMPTY_VALUE) {\n              const subject = this.subject\n              this.subject = null\n              return subject!.error(new EmptyObservableError())\n            }\n\n            this.subject!.next((this.currentValue = defaultValue))\n            this.subject!.complete()\n          },\n        })\n        source$.subscribe(this.subscription)\n        if (defaultValue !== EMPTY_VALUE && this.currentValue === EMPTY_VALUE) {\n          this.subject!.next((this.currentValue = defaultValue))\n        }\n      } else {\n        innerSub = this.subject.subscribe(subscriberWithoutComplete)\n        if (this.currentValue !== EMPTY_VALUE) {\n          subscriber.next(this.currentValue)\n        }\n      }\n    })\n\n    if (defaultValue === EMPTY_VALUE) {\n      // Remove the getDefaultValue property from this object, as it's not part of the interface\n      delete this.getDefaultValue\n    }\n  }\n\n  pipeState = (...ops: OperatorFunction<any, any>[]) => {\n    const result = (super.pipe as any)(...ops)\n    return result instanceof StateObservable\n      ? result\n      : new StateObservable(result, EMPTY_VALUE)\n  }\n\n  getRefCount = () => {\n    return this.refCount\n  }\n  getValue = (): Exclude<T, SUSPENSE> | StatePromise<Exclude<T, SUSPENSE>> => {\n    if (this.promise) return this.promise.p\n    if (\n      this.currentValue !== EMPTY_VALUE &&\n      (this.currentValue as any) !== SUSPENSE\n    )\n      return this.currentValue as any\n    if (this.defaultValue !== EMPTY_VALUE) return this.defaultValue as any\n    if (this.refCount === 0) throw new NoSubscribersError()\n\n    const promise = new StatePromise<Exclude<T, SUSPENSE>>((res, rej) => {\n      this.promise = { res, rej, p: null as any }\n    })\n    this.promise!.p = promise\n    return promise\n  }\n  getDefaultValue? = () => {\n    return this.defaultValue\n  }\n}\n", "import { Observable } from \"rxjs\"\nimport StateObservable from \"../internal/state-observable\"\n\nexport default function state<T>(observable: Observable<T>, defaultValue: T) {\n  return new StateObservable<T>(observable, defaultValue)\n}\n", "import type { state as IState } from \"../index.d\"\nimport { EMPTY_VALUE } from \"../internal/empty-value\"\nimport stateFactory from \"./stateFactory\"\nimport stateSingle from \"./stateSingle\"\n\nexport const state: typeof IState = (...args: any[]) =>\n  (typeof args[0] === \"function\" ? (stateFactory as any) : stateSingle)(\n    args[0],\n    args.length > 1 ? args[1] : EMPTY_VALUE,\n  )\n", "import { Observable } from \"rxjs\"\nimport type { withDefault as IWithDefault } from \"./index.d\"\nimport { state } from \"./state\"\n\nexport const withDefault: typeof IWithDefault =\n  <D>(defaultValue: D) =>\n  <T>(source$: Observable<T>) =>\n    state<D | T>(source$, defaultValue)\n", "import { Observable, Subscriber } from \"rxjs\"\nimport { SUSPENSE } from \"../SUSPENSE\"\nimport { sinkSuspense as ISinkSuspense } from \"../index.d\"\n\ntype SubscriberWithInner<T> = Subscriber<T> & { inner: Subscriber<any> }\nexport const sinkSuspense: typeof ISinkSuspense = () => {\n  return <T>(source$: Observable<T>) => {\n    let waiting: SubscriberWithInner<any> | null = null\n\n    return new Observable((observer) => {\n      if (waiting) {\n        waiting.inner = observer\n        const outter = waiting!\n        return () => {\n          if (outter.inner === observer) outter.unsubscribe()\n        }\n      }\n\n      let outter = new Subscriber<T | SUSPENSE>({\n        next(value: T | SUSPENSE) {\n          if (value === SUSPENSE) {\n            waiting = outter\n            outter.inner.error(value)\n            waiting = null\n            if (outter.inner === observer) {\n              outter.unsubscribe()\n            }\n          } else {\n            outter.inner.next(value)\n          }\n        },\n        error(e: unknown) {\n          outter.inner.error(e)\n        },\n        complete() {\n          outter.inner.complete()\n        },\n      }) as SubscriberWithInner<T>\n\n      outter.inner = observer\n      source$.subscribe(outter)\n\n      return () => {\n        if (outter.inner === observer) outter.unsubscribe()\n      }\n    })\n  }\n}\n", "import { Observable, Subscriber } from \"rxjs\"\nimport { SUSPENSE } from \"../SUSPENSE\"\nimport type { liftSuspense as ILiftSuspense } from \"../index.d\"\n\nexport const liftSuspense: typeof ILiftSuspense = () => {\n  return <T>(source$: Observable<T>): Observable<T | SUSPENSE> => {\n    return new Observable((observer) => {\n      let subscriber: Subscriber<any>\n\n      const setSubscriber = () => {\n        subscriber = new Subscriber<T>({\n          next(v: T) {\n            observer.next(v as any)\n          },\n          error(e: unknown) {\n            if (e === SUSPENSE) {\n              observer.next(e)\n              setSubscriber()\n            } else observer.error(e)\n          },\n          complete() {\n            observer.complete()\n          },\n        })\n        source$.subscribe(subscriber)\n      }\n\n      setSubscriber()\n\n      return () => {\n        subscriber.unsubscribe()\n      }\n    })\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
